[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  hist = log --pretty=format:\"%Cred%ad %Cgreen%h %Creset| %Cblue[%an] %Creset%s%Cgreen%d\" --graph --date=short

  # View the current working tree status using the short format
  sf = !"git fetch -q && git status -s -b"

  # View the current working tree status using the short format without fetch
  s = status -s -b

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # Show the diff between the latest commit and the current state
  dw = diff --word-diff

  # Add file to cached files
  a = add

  # Pull in remote changes for the current repository and all its submodules
  l = !"git pull; git submodule foreach git pull origin master"

  # Commit with message
  c = commit -m
  cb = commit -m "Build"

  # Reset file/s to head
  r = checkout

  # switch to branch
  b = checkout -q

  # Push local changes to tracked remote branch
  p = push origin
  pt = push origin --tags

  # Clone a repository including all submodules
  clone = clone --recursive

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  compare = "!f() { git log --oneline $1..$2;  }; f"

  pop = stash pop

  v = describe master --abbrev=0 --tags

  # Git flow
  f = flow
  ff = flow feature
  fh = flow hotfix
  fr = flow release

  # list aliases
  la = "!git config -l | grep alias | cut -c 7-"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
	excludesfile = /Users/nils/.gitignore_global
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  # [default] trailing-space: looks for spaces at the end of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false
	pager = diff-so-fancy | less --tabs=4 -RFX

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = true

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

	meta = 227
	frag = magenta bold
	old = red bold
	new = green bold
	commit = 227 bold
	whitespace = red reverse

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[diff]

  # Detect copies as well as renames
  renames = copies
	tool = p4mergetool

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true
	tool = p4mergetool

[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = current
  # Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"
[user]
	name = Nils Schönwald
	email = nils@schoenwald.media

[transfer]
        fsckobjects = true
[fetch]
        fsckobjects = true
[receive]
        fsckobjects = true
[clean]
  requireForce = false
[commit]
	template = /Users/nils/.stCommitMsg
[filter "spacetabs"]
  clean = tabs-to-spaces-script
  smudge = spaces-to-tabs-script
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[merge]
    tool = p4mergetool
[diff]
    tool = p4mergetool

[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =

[mergetool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$REMOTE $PWD/$LOCAL $PWD/$MERGED
	trustExitCode = false
[difftool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE
[fsck]
	zeroPaddedFilemode = ignore
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
